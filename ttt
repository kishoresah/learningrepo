import React, { useState, useRef } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Button,
  Typography,
  Box,
  FormControlLabel,
  Checkbox,
} from "@mui/material";

const App = () => {
  const [bidData, setBidData] = useState([
    { quantity: "", price: "", amount: 0, quantityError: "", priceError: "" },
    { quantity: "", price: "", amount: 0, quantityError: "", priceError: "" },
    { quantity: "", price: "", amount: 0, quantityError: "", priceError: "" },
  ]);

  const [maxBidAmount, setMaxBidAmount] = useState(null);
  const [isChecked, setIsChecked] = useState(false);

  // Store input field references
  const inputRefs = useRef({});

  const handleInputChange = (index, field, value) => {
    setBidData((prevBidData) => {
      return prevBidData.map((bid, i) =>
        i === index ? { ...bid, [field]: value, [`${field}Error`]: validateField(field, value) } : bid
      );
    });

    // Restore focus to the same field after state update
    setTimeout(() => {
      inputRefs.current[`${field}-${index}`]?.focus();
    }, 0);
  };

  const validateField = (field, value) => {
    if (field === "quantity") {
      const quantity = parseInt(value, 10);
      if (quantity % 10 !== 0) return "Bid quantity must be a multiple of 10";
    }
    if (field === "price") {
      const price = parseFloat(value);
      if (price < 100 || price > 200) return "Bid price must be between 100 and 200";
    }
    return "";
  };

  return (
    <Box sx={{ maxWidth: 800, margin: "auto", mt: 5, p: 3, boxShadow: 3, borderRadius: 2 }}>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              {["Bid Quantity", "Bid Price", "Bid Amount"].map((header) => (
                <TableCell key={header} sx={{ fontWeight: "bold" }}>{header}</TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {bidData.map((bid, index) => (
              <TableRow key={index}>
                <TableCell>
                  <TextField
                    inputRef={(el) => (inputRefs.current[`quantity-${index}`] = el)}
                    type="number"
                    value={bid.quantity}
                    onChange={(e) => handleInputChange(index, "quantity", e.target.value)}
                    variant="outlined"
                    size="small"
                    error={!!bid.quantityError}
                    helperText={bid.quantityError}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    inputRef={(el) => (inputRefs.current[`price-${index}`] = el)}
                    type="number"
                    value={bid.price}
                    onChange={(e) => handleInputChange(index, "price", e.target.value)}
                    variant="outlined"
                    size="small"
                    error={!!bid.priceError}
                    helperText={bid.priceError}
                  />
                </TableCell>
                <TableCell>{bid.amount ? bid.amount.toFixed(2) : "--"}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};

export default App;
