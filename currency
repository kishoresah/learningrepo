function currencyFormat(value: number | string): string {
  const num = typeof value === 'string' ? parseFloat(value) : value;

  if (isNaN(num)) {
    throw new Error('Invalid number input');
  }

  return num.toLocaleString('en-IN', {
    style: 'currency',
    currency: 'INR',
    maximumFractionDigits: 2,
  });
}

// Examples:
console.log(currencyFormat(123456.789)); // "₹1,23,456.79"
console.log(currencyFormat("98765.43")); // "₹98,765.43"

=========

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Registration } from './Registration';

describe('Registration Component', () => {
  const setup = (status: 'Y' | 'N', existingUser?: any) => {
    const setUsername = jest.fn();
    const setEmail = jest.fn();
    const setPhone = jest.fn();
    const onSubmit = jest.fn();

    render(
      <Registration
        status={status}
        existingUser={existingUser}
        setUsername={setUsername}
        setEmail={setEmail}
        setPhone={setPhone}
        onSubmit={onSubmit}
      />
    );

    return {
      setUsername,
      setEmail,
      setPhone,
      onSubmit,
    };
  };

  it('should render Create New User form and not call setters on mount', () => {
    const { setUsername, setEmail, setPhone } = setup('Y');

    expect(screen.getByText('Create New User')).toBeInTheDocument();
    expect(setUsername).not.toHaveBeenCalled();
    expect(setEmail).not.toHaveBeenCalled();
    expect(setPhone).not.toHaveBeenCalled();
  });

  it('should render Update User and populate fields using setters', () => {
    const existingUser = {
      name: 'Kishore',
      email: 'kishore@example.com',
      phone: '1234567890',
    };

    const { setUsername, setEmail, setPhone } = setup('N', existingUser);

    expect(screen.getByText('Update User')).toBeInTheDocument();
    expect(setUsername).toHaveBeenCalledWith('Kishore');
    expect(setEmail).toHaveBeenCalledWith('kishore@example.com');
    expect(setPhone).toHaveBeenCalledWith('1234567890');

    expect(screen.getByTestId('name-input')).toHaveValue('Kishore');
    expect(screen.getByTestId('email-input')).toHaveValue('kishore@example.com');
    expect(screen.getByTestId('phone-input')).toHaveValue('1234567890');
  });

  it('should submit form with entered values', () => {
    const { onSubmit } = setup('Y');

    fireEvent.change(screen.getByTestId('name-input'), { target: { value: 'John' } });
    fireEvent.change(screen.getByTestId('email-input'), { target: { value: 'john@example.com' } });
    fireEvent.change(screen.getByTestId('phone-input'), { target: { value: '9876543210' } });

    fireEvent.click(screen.getByText('Submit'));

    expect(onSubmit).toHaveBeenCalledWith({
      name: 'John',
      email: 'john@example.com',
      phone: '9876543210',
    });
  });
});

===================================
Full test cases
===================================
import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import UserForm from './UserForm'; // your component
import userReducer from '../store/userSlice'; // if needed
import { getBalance } from '../store/balanceSlice'; // the thunk

// 🧪 Mock the Redux Thunk
jest.mock('../store/balanceSlice', () => ({
  getBalance: jest.fn(() => ({
    type: 'getBalance/fulfilled',
    payload: {
      bank: 'SBI',
      balance: 10000,
    },
  })),
}));

// 🏗️ Create a mock Redux store
const mockStore = configureStore({
  reducer: {
    user: userReducer,     // include reducer if required
  },
});

describe('UserForm Component', () => {
  beforeEach(() => {
    render(
      <Provider store={mockStore}>
        <UserForm />
      </Provider>
    );
  });

  // ✅ 1. API call on mount (via useEffect)
  it('calls dispatch(getBalance) on mount', async () => {
    await waitFor(() => {
      expect(getBalance).toHaveBeenCalled();
    });

    // Form remains empty (API data used only in state)
    expect(screen.getByTestId('name')).toHaveValue('');
  });

  // ✅ 2. Name input should allow only uppercase
  it('shows error for invalid first name', () => {
    fireEvent.change(screen.getByTestId('name'), {
      target: { value: 'kishore123' },
    });
    expect(screen.getByText('Only uppercase letters allowed')).toBeInTheDocument();
  });

  // ✅ 3. Input fields work as expected
  it('updates email, dpid, and last name inputs correctly', () => {
    fireEvent.change(screen.getByTestId('email'), {
      target: { value: 'test@domain.com' },
    });
    fireEvent.change(screen.getByTestId('dpid'), {
      target: { value: 'DP456' },
    });
    fireEvent.change(screen.getByTestId('lastName'), {
      target: { value: 'Verma' },
    });

    expect(screen.getByTestId('email')).toHaveValue('test@domain.com');
    expect(screen.getByTestId('dpid')).toHaveValue('DP456');
    expect(screen.getByTestId('lastName')).toHaveValue('Verma');
  });

  // ✅ 4. Validation on submit with missing/invalid fields
  it('shows validation errors on invalid submit', () => {
    fireEvent.change(screen.getByTestId('name'), {
      target: { value: '' },
    });
    fireEvent.change(screen.getByTestId('email'), {
      target: { value: 'invalid' },
    });
    fireEvent.change(screen.getByTestId('dpid'), {
      target: { value: '' },
    });
    fireEvent.change(screen.getByTestId('lastName'), {
      target: { value: '' },
    });

    fireEvent.click(screen.getByText('Submit'));

    expect(screen.getByText('Name is required')).toBeInTheDocument();
    expect(screen.getByText('Email is invalid')).toBeInTheDocument();
    expect(screen.getByText('DP ID required')).toBeInTheDocument();
    expect(screen.getByText('Last Name required')).toBeInTheDocument();
  });

  // ✅ 5. Successful form submit
  it('submits the form when all fields are valid', () => {
    fireEvent.change(screen.getByTestId('name'), {
      target: { value: 'KISHORE' },
    });
    fireEvent.change(screen.getByTestId('email'), {
      target: { value: 'test@example.com' },
    });
    fireEvent.change(screen.getByTestId('dpid'), {
      target: { value: 'DP999' },
    });
    fireEvent.change(screen.getByTestId('lastName'), {
      target: { value: 'Sharma' },
    });

    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();

    fireEvent.click(screen.getByText('Submit'));

    expect(consoleSpy).toHaveBeenCalledWith('Form Submitted:', {
      name: 'KISHORE',
      email: 'test@example.com',
      dpid: 'DP999',
      lastName: 'Sharma',
    });

    consoleSpy.mockRestore();
  });
});

