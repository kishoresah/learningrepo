import React, { useEffect, useRef } from "react";

import React, { useEffect, useRef } from "react";
import React, { useEffect, useRef } from "react";


const CaptchaCanvas = ({ captchaText, width = 220, height = 70 }) => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    // Fill background
    ctx.fillStyle = "#f7f7f7";
    ctx.fillRect(0, 0, width, height);

    // Add fewer random dots (noise)
    for (let i = 0; i < 50; i++) {
      ctx.fillStyle = `rgba(${rand(0, 255)}, ${rand(0, 255)}, ${rand(
        0,
        255
      )}, 0.4)`;
      ctx.beginPath();
      ctx.arc(rand(0, width), rand(0, height), rand(1, 2), 0, Math.PI * 2);
      ctx.fill();
    }

    // Add fewer lines
    for (let i = 0; i < 3; i++) {
      ctx.strokeStyle = `rgba(${rand(0, 255)}, ${rand(0, 255)}, ${rand(
        0,
        255
      )}, 0.3)`;
      ctx.beginPath();
      ctx.moveTo(rand(0, width), rand(0, height));
      ctx.lineTo(rand(0, width), rand(0, height));
      ctx.stroke();
    }

    // Draw black CAPTCHA text
    ctx.font = "bold 34px 'Arial Black', sans-serif";
    ctx.textBaseline = "middle";
    ctx.textAlign = "center";
    ctx.fillStyle = "#000"; // solid black font

    const spacing = width / (captchaText.length + 1);
    for (let i = 0; i < captchaText.length; i++) {
      const char = captchaText[i];
      const y = height / 2 + Math.sin(i + Date.now() / 500) * 4; // Mild wave
      ctx.save();
      ctx.translate(spacing * (i + 1), y);
      ctx.rotate(rand(-10, 10) * Math.PI / 180); // Small rotation for variation
      ctx.fillText(char, 0, 0);
      ctx.restore();
    }
  }, [captchaText, width, height]);

  const rand = (min, max) =>
    Math.floor(Math.random() * (max - min + 1)) + min;

  return <canvas ref={canvasRef} width={width} height={height} />;
};

export default CaptchaCanvas;
