import React, { useEffect, useRef } from "react";

const CaptchaCanvas = ({ captchaText, width = 200, height = 60 }) => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    // Fill background with light gray
    ctx.fillStyle = "#f0f0f0";
    ctx.fillRect(0, 0, width, height);

    // Add random dots for noise
    for (let i = 0; i < 150; i++) {
      ctx.fillStyle = `rgba(${rand(0, 255)}, ${rand(0, 255)}, ${rand(
        0,
        255
      )}, 0.7)`;
      ctx.beginPath();
      ctx.arc(rand(0, width), rand(0, height), rand(1, 3), 0, Math.PI * 2);
      ctx.fill();
    }

    // Draw random lines for noise
    for (let i = 0; i < 5; i++) {
      ctx.strokeStyle = `rgba(${rand(0, 255)}, ${rand(0, 255)}, ${rand(
        0,
        255
      )}, 0.5)`;
      ctx.beginPath();
      ctx.moveTo(rand(0, width), rand(0, height));
      ctx.lineTo(rand(0, width), rand(0, height));
      ctx.stroke();
    }

    // Draw CAPTCHA text with wave distortion
    ctx.font = "bold 28px 'Courier New'";
    ctx.textBaseline = "middle";
    const xStart = 20;
    for (let i = 0; i < captchaText.length; i++) {
      const char = captchaText[i];
      ctx.fillStyle = `rgb(${rand(0, 255)}, ${rand(0, 255)}, ${rand(0, 255)})`;
      const y = height / 2 + Math.sin(i + Date.now() / 300) * 6;
      ctx.save();
      ctx.translate(xStart + i * 25, y);
      ctx.rotate(rand(-15, 15) * Math.PI / 180); // random rotation
      ctx.fillText(char, 0, 0);
      ctx.restore();
    }
  }, [captchaText, width, height]);

  const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

  return <canvas ref={canvasRef} width={width} height={height} />;
};

export default CaptchaCanvas;
